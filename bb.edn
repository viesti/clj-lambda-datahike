{:tasks
 {:init (do
          (def src "src.zip")

          (defn tail [lambda-name]
            (let [lambda-name (:out (shell {:out :string :dir "terraform"} "terraform" "output" "-raw" lambda-name))]
              (shell "aws" "logs" "tail" "--follow" (str "/aws/lambda/" lambda-name)))))
  :requires ([babashka.process :as p])
  build {:doc "Build lambda"
         :task (clojure "-T:build uber")}
  deploy {:doc "Deploy lambda"
          :task (shell {:dir "terraform"} "terraform" "apply")}
  write {:doc "Invoke write lambda"
         :task (let [lambda-name (:out (shell {:out :string :dir "terraform"} "terraform" "output" "-raw" "writer_lambda_name"))
                     payload (first *command-line-args*)
                     payload-base64 (.encodeToString (java.util.Base64/getEncoder) (.getBytes payload))]
                 (shell {:extra-env {"AWS_PAGER" ""}} "aws" "lambda" "invoke" "--function-name" lambda-name "--payload" payload-base64 "out")
                 (println (slurp "out")))}
  read {:doc "Invoke read lambda"
        :task (let [lambda-name (:out (shell {:out :string :dir "terraform"} "terraform" "output" "-raw" "reader_lambda_name"))]
                (shell {:extra-env {"AWS_PAGER" ""}} "aws" "lambda" "invoke" "--function-name" lambda-name "out")
                (println (slurp "out")))}
  tail-writer-logs {:doc "Tail writer lambda logs"
                    :task (tail "writer_lambda_name")}
  tail-reader-logs {:doc "Tail reader lambda logs"
                    :task (tail "reader_lambda_name")}}}
